<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | Deivinson Tejeda]]></title>
  <link href="http://deivinsontejeda.github.io/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://deivinsontejeda.github.io/"/>
  <updated>2014-11-04T09:04:20-03:00</updated>
  <id>http://deivinsontejeda.github.io/</id>
  <author>
    <name><![CDATA[Deivinson Tejeda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Ruby Geocoder gem locally]]></title>
    <link href="http://deivinsontejeda.github.io/blog/2014/10/29/using-ruby-geocoder-gem-locally/"/>
    <updated>2014-10-29T23:06:00-03:00</updated>
    <id>http://deivinsontejeda.github.io/blog/2014/10/29/using-ruby-geocoder-gem-locally</id>
    <content type="html"><![CDATA[<p>These days I have been needing test a small feature (for a personal project) related with Geolocalization. The first and most obvious
option was used <a href="http://www.rubygeocoder.com">Geocoder</a> which has a number features enough for what I&rsquo;m needing.</p>

<p>Alright I already have settled the gem on my Gemfile, but <em>How I can test this gem on my local environment?</em> due to in the <a href="https://github.com/alexreisner/geocoder#request-geocoding-by-ip-address">docs</a>
it&rsquo;s clear when you use this Gem with a IP <code>0.0.0.0</code> the <a href="http://www.rubydoc.info/github/alexreisner/geocoder/master/Geocoder/Result">Geocoder::Result</a>
object is <code>nil</code>.</p>

<p>Fortunately there is a option at least I can figure out this one in order to sort out the previous issue and do test on local.</p>

<p>We&rsquo;re going to use Rack middleware in order to mock the IP with a custom one.</p>

<p>Let&rsquo;s create a file which we called it <code>fake_ip.rb</code> with following content.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FakeIp</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">ip</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@app = app</span>
</span><span class='line'><span class="sr">@ip = ip</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;env[&#39;HTTP_X_FORWARDED_FOR&#39;] = nil</span>
</span><span class='line'><span class="sr">env[&#39;REMOTE_ADDR&#39;] = env[&#39;action_dispatch.remote_ip&#39;] = @ip</span>
</span><span class='line'><span class="sr">@status, @headers, @response = @app.call(env)</span>
</span><span class='line'><span class="sr">[@status, @headers, @response]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The previous code is pretty simple, the interesting part is on <code>call</code> method which change the values for some of
elements <code>env</code>.</p>

<p>In terms very simple The <code>env</code> variable is a hash. That hash contains a lot of useful information including
request headers and body, as well as run-time environment data that may have been added by upstream middleware.</p>

<p>Now, edit <code>config/application.rb</code> and put:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">FakeIp</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">187</span><span class="o">.</span><span class="mi">16</span><span class="o">.</span><span class="mi">144</span><span class="o">.</span><span class="mi">141</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The previous code allow us to mock the IP with someone custom. Now if you visit a controller a inspect the content</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">request</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">country_code</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;should see the country code for IP 187.16.144.141 &lt;code&gt;BR&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I wrote a small <a href="https://github.com/deivinsontejeda/rack-app">rack-app</a> in order to show you the whole workflow.</p>

<p>Do you know a better way to do this? Share it!</p>
]]></content>
  </entry>
  
</feed>
